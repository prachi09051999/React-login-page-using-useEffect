{"ast":null,"code":"import _slicedToArray from\"/Users/prachitripathi/Documents/projects/React-login-page-using-useEffect/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var AuthContext=/*#__PURE__*/React.createContext({isLoggedIn:false,onLogout:function onLogout(){},onLogin:function onLogin(){}});export var AuthcontextProvider=function AuthcontextProvider(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoggedIn=_useState2[0],setIsLoggedIn=_useState2[1];useEffect(function(){if(localStorage.getItem('isLoggedIn')==='1'){setIsLoggedIn(true);}},[]);var loginHandler=function loginHandler(email,password){// We should of course check email and password\n// But it's just a dummy/ demo anyways\nlocalStorage.setItem(\"isLoggedIn\",\"1\");setIsLoggedIn(true);};var logoutHandler=function logoutHandler(){localStorage.removeItem('isLoggedIn');setIsLoggedIn(false);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isLoggedIn:isLoggedIn,onLogout:logoutHandler,onLogin:loginHandler},children:props.children});};export default AuthContext;","map":{"version":3,"sources":["/Users/prachitripathi/Documents/projects/React-login-page-using-useEffect/src/store/auth-context.js"],"names":["React","useState","useEffect","AuthContext","createContext","isLoggedIn","onLogout","onLogin","AuthcontextProvider","props","setIsLoggedIn","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem","children"],"mappings":"+JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,C,2CAEA,GAAMC,CAAAA,WAAW,cAAGH,KAAK,CAACI,aAAN,CAAoB,CACtCC,UAAU,CAAE,KAD0B,CAEtCC,QAAQ,CAAE,mBAAI,CAAE,CAFsB,CAGtCC,OAAO,CAAE,kBAAI,CAAE,CAHuB,CAApB,CAApB,CAMA,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,KAAD,CAAW,CAC5C,cAAoCR,QAAQ,CAAC,KAAD,CAA5C,wCAAOI,UAAP,eAAmBK,aAAnB,eAEAR,SAAS,CAAC,UAAM,CACd,GAAGS,YAAY,CAACC,OAAb,CAAqB,YAArB,IAAsC,GAAzC,CAA6C,CAC3CF,aAAa,CAAC,IAAD,CAAb,CACD,CACF,CAJQ,CAIN,EAJM,CAAT,CAMA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAQC,QAAR,CAAqB,CACxC;AACA;AACAJ,YAAY,CAACK,OAAb,CAAqB,YAArB,CAAkC,GAAlC,EACAN,aAAa,CAAC,IAAD,CAAb,CACD,CALD,CAOA,GAAMO,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1BN,YAAY,CAACO,UAAb,CAAwB,YAAxB,EACAR,aAAa,CAAC,KAAD,CAAb,CACD,CAHD,CAGG,mBACF,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CACzB,CACEL,UAAU,CAACA,UADb,CAEEC,QAAQ,CAAEW,aAFZ,CAGEV,OAAO,CAAEM,YAHX,CADF,UAOGJ,KAAK,CAACU,QAPT,EADE,CAWJ,CA9BM,CAgCP,cAAehB,CAAAA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst AuthContext = React.createContext({\n  isLoggedIn: false,\n  onLogout: ()=>{},\n  onLogin: ()=>{}\n});\n\nexport const AuthcontextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    if(localStorage.getItem('isLoggedIn') ==='1'){\n      setIsLoggedIn(true);\n    }\n  }, [])\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\",\"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  }; return (\n   <AuthContext.Provider value={\n     {\n       isLoggedIn:isLoggedIn,\n       onLogout: logoutHandler,\n       onLogin: loginHandler\n     }\n   }>\n     {props.children}\n   </AuthContext.Provider>\n );\n}\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}